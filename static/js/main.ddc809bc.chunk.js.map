{"version":3,"sources":["components/Titles.js","components/Form.js","components/Weather.js","App.js","serviceWorker.js","index.js"],"names":["Titles","react_default","a","createElement","className","React","Component","Form","onSubmit","this","props","getWeather","type","name","placeholder","Weather","city","country","temperature","humidity","description","icon","src","concat","alt","error","API_KEY","process","App","state","undefined","_callee","e","api_call","data","regenerator_default","wrap","_context","prev","next","preventDefault","target","elements","value","fetch","sent","json","console","log","cod","_this","setState","main","temp","sys","weather","stop","components_Titles","components_Form","components_Weather","Boolean","window","location","hostname","match","ReactDOM","render","src_App","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"0RAgBeA,mLAZX,OACEC,EAAAC,EAAAC,cAAA,WACIF,EAAAC,EAAAC,cAAA,WACIF,EAAAC,EAAAC,cAAA,MAAIC,UAAU,0BAAd,kBACAH,EAAAC,EAAAC,cAAA,KAAGC,UAAU,6BAAb,4EANOC,IAAMC,WCeZC,mLAbX,OACEN,EAAAC,EAAAC,cAAA,WAEFF,EAAAC,EAAAC,cAAA,QAAMK,SAAUC,KAAKC,MAAMC,YACvBV,EAAAC,EAAAC,cAAA,SAAOS,KAAK,OAAOC,KAAK,OAAOC,YAAY,WAC3Cb,EAAAC,EAAAC,cAAA,SAAOS,KAAK,OAAOC,KAAK,UAAUC,YAAY,cAC9Cb,EAAAC,EAAAC,cAAA,uCARWE,IAAMC,WCuCVS,mLArCX,OACEd,EAAAC,EAAAC,cAAA,OAAKC,UAAU,iBAGPK,KAAKC,MAAMM,MAAQP,KAAKC,MAAMO,SAAWhB,EAAAC,EAAAC,cAAA,KAAGC,UAAU,gBAAb,YACzCH,EAAAC,EAAAC,cAAA,QAAMC,UAAU,kBAAhB,IAAmCK,KAAKC,MAAMM,KAA9C,KAAsDP,KAAKC,MAAMO,UAIjER,KAAKC,MAAMQ,aAAejB,EAAAC,EAAAC,cAAA,KAAGC,UAAU,gBAAb,eAC1BH,EAAAC,EAAAC,cAAA,QAAMC,UAAU,kBAAhB,IAAmCK,KAAKC,MAAMQ,YAA9C,MAKAT,KAAKC,MAAMS,UAAYlB,EAAAC,EAAAC,cAAA,KAAGC,UAAU,gBAAb,YACvBH,EAAAC,EAAAC,cAAA,QAAMC,UAAU,kBAAhB,IAAmCK,KAAKC,MAAMS,SAA9C,MAIAV,KAAKC,MAAMU,aAAeX,KAAKC,MAAMW,MAAQpB,EAAAC,EAAAC,cAAA,KAAGC,UAAU,gBAAb,eAC7CH,EAAAC,EAAAC,cAAA,QAAMC,UAAU,kBAAhB,IAAmCK,KAAKC,MAAMU,YAC9CnB,EAAAC,EAAAC,cAAA,OAAKC,UAAU,gBAAgBkB,IAAG,mCAAAC,OAAuCd,KAAKC,MAAMW,KAAlD,QAA8DG,IAAI,mBAKpGf,KAAKC,MAAMe,OAASxB,EAAAC,EAAAC,cAAA,KAAGC,UAAU,gBACjCH,EAAAC,EAAAC,cAAA,QAAMC,UAAU,kBAAhB,IAAmCK,KAAKC,MAAMe,gBA9BtCpB,IAAMC,WCItBoB,EAAO,GAAAH,OAAMI,oCA8EJC,6MA1EXC,MAAQ,CACJX,iBAAaY,EACbd,UAAMc,EACNb,aAASa,EACTX,cAAUW,EACVV,iBAAaU,EACbL,WAAOK,KAEXnB,iDAAa,SAAAoB,EAAOC,GAAP,IAAAhB,EAAAC,EAAAgB,EAAAC,EAAA,OAAAC,EAAAjC,EAAAkC,KAAA,SAAAC,GAAA,cAAAA,EAAAC,KAAAD,EAAAE,MAAA,cACTP,EAAEQ,iBACExB,EAAOgB,EAAES,OAAOC,SAAS1B,KAAK2B,MAE9B1B,EAAUe,EAAES,OAAOC,SAASzB,QAAQ0B,MAJ/BN,EAAAE,KAAA,EAMcK,MAAK,qDAAArB,OAAsDP,EAAtD,KAAAO,OAA8DN,EAA9D,WAAAM,OAA+EG,EAA/E,oBANnB,cAMHO,EANGI,EAAAQ,KAAAR,EAAAE,KAAA,EAQUN,EAASa,OARnB,OAQHZ,EARGG,EAAAQ,KAUTE,QAAQC,IAAId,GACK,QAAbA,EAAKe,IACLC,EAAKC,SAAS,CACV1B,MAAO,8BAEJT,GAAQC,GAEfiC,EAAKC,SAAS,CACVjC,YAAagB,EAAKkB,KAAKC,KACvBrC,KAAMkB,EAAKrB,KACXI,QAASiB,EAAKoB,IAAIrC,QAClBE,SAAUe,EAAKkB,KAAKjC,SACpBC,YAAac,EAAKqB,QAAQ,GAAGnC,YAC7BC,KAAMa,EAAKqB,QAAQ,GAAGlC,KACtBI,MAAO,OAxBN,yBAAAY,EAAAmB,SAAAzB,EAAAtB,uIA+BT,OACKR,EAAAC,EAAAC,cAAA,WACLF,EAAAC,EAAAC,cAAA,OAAKC,UAAU,WACbH,EAAAC,EAAAC,cAAA,OAAKC,UAAU,cACbH,EAAAC,EAAAC,cAAA,OAAKC,UAAU,aACbH,EAAAC,EAAAC,cAAA,OAAKC,UAAU,OACbH,EAAAC,EAAAC,cAAA,OAAKC,UAAU,4BACbH,EAAAC,EAAAC,cAACsD,EAAD,OAEFxD,EAAAC,EAAAC,cAAA,OAAKC,UAAU,2BACbH,EAAAC,EAAAC,cAACuD,EAAD,CAAM/C,WAAYF,KAAKE,aACvBV,EAAAC,EAAAC,cAACwD,EAAD,CACEzC,YAAaT,KAAKoB,MAAMX,YACxBC,SAAUV,KAAKoB,MAAMV,SACrBH,KAAMP,KAAKoB,MAAMb,KACjBC,QAASR,KAAKoB,MAAMZ,QACpBG,YAAaX,KAAKoB,MAAMT,YACxBC,KAAMZ,KAAKoB,MAAMR,KACjBI,MAAOhB,KAAKoB,MAAMJ,qBA1DpBpB,IAAMC,iBCGJsD,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCTNC,IAASC,OAAOjE,EAAAC,EAAAC,cAACgE,EAAD,MAASC,SAASC,eAAe,SDwH3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMC,KAAK,SAAAC,GACjCA,EAAaC","file":"static/js/main.ddc809bc.chunk.js","sourcesContent":["import React  from 'react'\n\nclass Titles extends React.Component {\n  render() {\n    return (\n      <div>\n          <div>\n              <h1 className=\"title-container__title\">Weather Search</h1>\n              <p className=\"title-container__subtitle\">Input city and country to get Temperature, Conditions, and More</p>\n          </div>\n        \n      </div>\n    )\n  }\n}\n\nexport default Titles;","import React from 'react'\n\nclass Form extends React.Component {\n  render() {\n    return (\n      <div>\n          {/* On form submission use getWeather function passed in via props from App.js */}\n    <form onSubmit={this.props.getWeather}>\n        <input type=\"text\" name=\"city\" placeholder=\"city..\"/>\n        <input type=\"text\" name=\"country\" placeholder=\"country..\"/>\n        <button> Get Weather</button>\n    </form>\n      </div>\n    )\n  }\n}\n\nexport default Form;\n","import React from 'react'\n\nclass Weather extends React.Component {\n  render() {\n    return (\n      <div className=\"weather__info\">\n          {/* If the props exist only then will the <p> tags be shown */}\n          { \n              this.props.city && this.props.country && <p className=\"weather__key\">Location: \n              <span className=\"weather__value\"> {this.props.city}, {this.props.country}</span>\n              </p>\n              }\n          { \n              this.props.temperature && <p className=\"weather__key\">Temperature: \n              <span className=\"weather__value\"> {this.props.temperature}F</span>\n\n               </p>\n              }\n          { \n              this.props.humidity && <p className=\"weather__key\">Humidity:\n              <span className=\"weather__value\"> {this.props.humidity} </span>\n              </p>\n              }\n          {\n              this.props.description && this.props.icon && <p className=\"weather__key\">Description:\n              <span className=\"weather__value\"> {this.props.description}\n              <img className=\"weather__icon\" src = {`http://openweathermap.org/img/w/${this.props.icon}.png`} alt=\"weather_icon\"/>\n              </span>\n              </p>\n              }\n          {\n              this.props.error && <p className=\"weather__key\"> \n              <span className=\"weather__error\"> {this.props.error}\n              </span>\n              </p>\n              }\n      </div>\n    )\n  }\n}\n\nexport default Weather;","import React from \"react\";\nimport Titles from \"./components/Titles\";\nimport Form from \"./components/Form\";\nimport Weather from \"./components/Weather\";\n\n\nconst API_KEY = `${process.env.REACT_APP_WEATHER_API_KEY}`;\n\n\nclass App extends React.Component {\n    state = {\n        temperature: undefined,\n        city: undefined,\n        country: undefined,\n        humidity: undefined,\n        description: undefined,\n        error: undefined\n    }\n    getWeather = async (e) => {\n        e.preventDefault();\n        let city = e.target.elements.city.value\n\n        let country = e.target.elements.country.value;\n\n        const api_call = await fetch(`https://api.openweathermap.org/data/2.5/weather?q=${city},${country}&APPID=${API_KEY}&units=imperial`)\n        //Convert the api data to Json format to a readable format\n        const data = await api_call.json();\n        // If the error code is 404, set State to error message else if the city and country exists run the code \n        console.log(data)\n        if (data.cod === '404') {\n            this.setState({\n                error: 'Invalid Entry (Not Found)'\n            })\n        } else if (city && country) {\n\n            this.setState({\n                temperature: data.main.temp,\n                city: data.name,\n                country: data.sys.country,\n                humidity: data.main.humidity,\n                description: data.weather[0].description,\n                icon: data.weather[0].icon,\n                error: null\n            })\n        }\n    }\n\n\n    render() {\n        return (\n             <div>\n        <div className=\"wrapper\">\n          <div className=\"main-fluid\">\n            <div className=\"container\">\n              <div className=\"row\">\n                <div className=\"col-xs-5 title-container\">\n                  <Titles />\n                </div>\n                <div className=\"col-xs-7 form-container\">\n                  <Form getWeather={this.getWeather} />\n                  <Weather \n                    temperature={this.state.temperature} \n                    humidity={this.state.humidity}\n                    city={this.state.city}\n                    country={this.state.country}\n                    description={this.state.description}\n                    icon={this.state.icon}\n                    error={this.state.error}\n                  />\n                </div>\n              </div>\n            </div>\n          </div>\n        </div>\n      </div>\n           \n        );\n    }\n};\n\n\n\n\n\nexport default App;","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read http://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit http://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See http://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport 'bootstrap/dist/css/bootstrap.min.css';\nimport './index.css';\nimport App from './App';\nimport \"./App.css\";\nimport * as serviceWorker from './serviceWorker';\n\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: http://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}